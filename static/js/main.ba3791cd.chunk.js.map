{"version":3,"sources":["components/Scaffold.jsx","pages/mobx-test/deep-watch/store.js","pages/mobx-test/deep-watch/Form.jsx","pages/mobx-test/deep-watch/index.jsx","pages/mobx-test/dynamic-object/store.js","pages/mobx-test/dynamic-object/Form.jsx","pages/mobx-test/dynamic-object/index.jsx","pages/mobx-test/index.jsx","pages/redux-test/compose/index.jsx","pages/redux-test/connect/index.jsx","pages/redux-test/index.jsx","App.jsx","serviceWorker.js","index.js"],"names":["CustomLink","_ref","to","children","exact","rest","Object","objectWithoutProperties","react_default","a","createElement","react_router","path","_ref2","match","react_router_dom","assign","es_button","type","style","marginRight","Scaffold","_ref3","config","_ref3$prefix","prefix","map","_ref4","idx","name","key","_ref5","component","store","store_class","_class","classCallCheck","this","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","createClass","get","data","username","password","applyDecoratedDescriptor","prototype","observable","configurable","enumerable","writable","initializer","computed","getOwnPropertyDescriptor","action","_this","str","_this2","Form","inject","observer","_ref$store","updateUsername","updatePassword","es_form","Item","label","input","value","onChange","e","target","DeepWatch","mobx_react_module","stores","Fragment","dynamic_object_store_class","store_descriptor","store_descriptor2","store_descriptor3","_descriptor4","concat","maxKey","updateItem","addItem","keys","onClick","DynamicObject","Form_Form","MobxTest","Scaffold_Scaffold","Compose","Connect","ReduxTest","App","Pages","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba3791cd.chunk.js","sourcesContent":["import React from 'react'\nimport { NavLink, HashRouter as Router, Route } from 'react-router-dom'\nimport { Button } from 'antd'\n\nfunction CustomLink({ to, children, exact, ...rest }) {\n  return (\n    <Route\n      path={to}\n      exact={exact}\n      children={({ match }) => (\n        <NavLink to={to} {...rest}>\n          <Button type={match && 'primary'} style={{ marginRight: 8 }}>\n            {children}\n          </Button>\n        </NavLink>\n      )}\n    />\n  )\n}\n\n/**\n *\n * @param {string} prefix\n * @param {Array<{\n *   name: string\n *   path: string\n *   exact: boolean\n *   component: React.ReactNode\n * }>} config\n * @returns React.ReactNode\n */\nexport const Scaffold = ({ config, prefix = '' }) => {\n  return (\n    <Router>\n      <header>\n        {config.map(({ name, exact, path: to }, idx) => (\n          <CustomLink key={idx} {...{ exact, to: prefix + to }}>\n            {name}\n          </CustomLink>\n        ))}\n      </header>\n      <content>\n        {config.map(({ exact, component, path }, idx) => (\n          <Route {...{ exact, component, path: prefix + path }} key={idx} />\n        ))}\n      </content>\n    </Router>\n  )\n}\n","import { observable, computed, action } from 'mobx'\n\nexport const store = new (class {\n  @observable data = [\n    {\n      data: {\n        data: [\n          {\n            username: '123',\n            password: '456'\n          }\n        ]\n      }\n    }\n  ]\n\n  @computed get username() {\n    return this.data[0].data.data[0].username\n  }\n\n  @computed get password() {\n    return this.data[0].data.data[0].password\n  }\n\n  @action updateUsername = (str) => {\n    this.data[0].data.data[0].username = str\n  }\n\n  @action updatePassword = (str) => {\n    this.data[0].data.data[0].password = str\n  }\n})()\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { Input, Form as AntForm } from 'antd'\n\nconst FormC = ({\n  store: { username, password, updateUsername, updatePassword }\n}) => {\n  return (\n    <AntForm>\n      <AntForm.Item label=\"username\">\n        <Input\n          value={username}\n          onChange={(e) => updateUsername(e.target.value)}\n        />\n      </AntForm.Item>\n      <AntForm.Item label=\"password\">\n        <Input\n          value={password}\n          onChange={(e) => updatePassword(e.target.value)}\n        />\n      </AntForm.Item>\n    </AntForm>\n  )\n}\n\nexport const Form = inject('store')(observer(FormC))\n","import React from 'react'\nimport { Provider } from 'mobx-react'\nimport * as stores from './store'\nimport { Form } from './Form'\n\nexport function DeepWatch() {\n  return (\n    <Provider {...stores}>\n      <>\n        <h1>Deep Watch</h1>\n        <Form />\n      </>\n    </Provider>\n  )\n}\n","import { observable, computed, action } from 'mobx'\n\nexport const store = new (class {\n  @observable maxKey = 0\n  @observable data = {\n    username: '123',\n    password: '456'\n  }\n\n  @action updateItem = (key, value) => {\n    this.data[key] = value\n  }\n\n  @action addItem = () => {\n    this.data[`new ${++this.maxKey}`] = ''\n  }\n})()\n","import React from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { Input, Form as AntForm, Button } from 'antd'\n\nconst FormC = ({ store: { data, updateItem, maxKey, addItem } }) => {\n  return (\n    <AntForm>\n      {Object.keys(data).map((key) => (\n        <AntForm.Item label={key} key={key}>\n          <Input\n            value={data[key]}\n            onChange={(e) => updateItem(key, e.target.value)}\n          />\n        </AntForm.Item>\n      ))}\n      <AntForm.Item label=\"add\">\n        <Button onClick={addItem}>new {maxKey + 1}</Button>\n      </AntForm.Item>\n    </AntForm>\n  )\n}\n\nexport const Form = inject('store')(observer(FormC))\n","import React from 'react'\nimport { Provider } from 'mobx-react'\nimport * as stores from './store'\nimport { Form } from './Form'\n\nexport function DynamicObject() {\n  return (\n    <Provider {...stores}>\n      <>\n        <h1>Dynamic Object</h1>\n        <Form />\n      </>\n    </Provider>\n  )\n}\n","import React from 'react'\nimport { Scaffold } from '@/components'\nimport { DeepWatch } from './deep-watch'\nimport { DynamicObject } from './dynamic-object'\n\nexport const MobxTest = () => {\n  const config = [\n    {\n      name: 'Deep Watch',\n      path: '/',\n      component: DeepWatch,\n      exact: true\n    },\n    {\n      name: 'Dynamic Object',\n      path: '/dynamic-object',\n      component: DynamicObject\n    }\n  ]\n  return <Scaffold prefix='/mobx-test' config={config} />\n}\n","import React from 'react'\n\nexport const Compose = () => {\n  return (\n    <>\n      <h1>Compose</h1>\n    </>\n  )\n}\n","import React from 'react'\n\nexport const Connect = () => {\n  return (\n    <>\n      <h1>Connect</h1>\n    </>\n  )\n}\n","import React from 'react'\nimport { Scaffold } from '@/components'\nimport { Compose } from './compose'\nimport { Connect } from './connect'\n\nexport const ReduxTest = () => {\n  const config = [\n    {\n      name: 'Compose',\n      path: '/',\n      component: Compose,\n      exact: true\n    },\n    {\n      name: 'Connect',\n      path: '/connect',\n      component: Connect\n    }\n  ]\n  return <Scaffold prefix=\"/redux-test\" config={config} />\n}\n","import React from 'react'\nimport { Scaffold } from '@/components'\nimport * as Pages from './pages'\n\nconst App = () => {\n  const config = [\n    {\n      name: 'Mobx Test',\n      path: '/mobx-test',\n      component: Pages.MobxTest,\n      exact: true\n    },\n    {\n      name: 'Redux Test',\n      path: '/redux-test',\n      component: Pages.ReduxTest\n    }\n  ]\n  return (\n    <main>\n      <Scaffold config={config} />\n    </main>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}